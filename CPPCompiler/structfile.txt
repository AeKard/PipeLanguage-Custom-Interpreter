-frontend
ast
lexer
parser

-runtime
   -eval
    expression
    statement
environment
interpreter
value

   ┌──────────────────────────┐
   │        Source Code        │
   │  e.g. "let x = 42;"      │
   └────────────┬─────────────┘
                │
                ▼
   ┌──────────────────────────┐
   │          Lexer            │
   │ (Tokenizes text → Tokens) │
   │ e.g. [Keyword(let), Id(x),│
   │ Operator(=), Number(42)]  │
   └────────────┬─────────────┘
                │
                ▼
   ┌──────────────────────────┐
   │          Parser           │
   │ (Tokens → AST nodes)      │
   │ e.g. VariableDeclNode     │
   │  └── Identifier(x)        │
   │  └── NumberLiteral(42)    │
   └────────────┬─────────────┘
                │
                ▼
   ┌──────────────────────────┐
   │   Abstract Syntax Tree    │
   │  (AST representation)     │
   │  - Program                │
   │     └── Statement         │
   │         └── Expression    │
   └────────────┬─────────────┘
                │
                ▼
   ┌──────────────────────────┐
   │       Interpreter         │
   │  (Walks AST & executes)   │
   │  e.g. stores `x=42`       │
   └────────────┬─────────────┘
                │
                ▼
   ┌──────────────────────────┐
   │        Runtime            │
   │  - Environment (symbols)  │
   │  - Values (numbers, bools)│
   │  - Eval logic             │
   └──────────────────────────┘
